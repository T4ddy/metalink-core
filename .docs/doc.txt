суть - сервер игры где по копии реальной карты США двигаются таргеты, которыми опосредованно 
управляют сам игрок (оператор). на таргеты при движении будут влиять зоны, где они находятся 
(баффы, дебаффы - повышенное потребление какого-то ресурса, или наоборот его увеличение). 
один сервер должен обрабатывать 1.000.000 таргетов с тиком до десяти секунд

я думаю хранить все горячие (нужны хотя б раз в минуту) данные в памяти сервера и скажем 
раз в минуту их скидывать в редис (редис должен скидывать их между этими апдейтами на диск) 
и раз в час чанками в течении пяти-десяти минут скидывать их в постгри.

на инит сервера все данные грузятся из постгри в память сервера, сверху накатываются данные 
из редиса (сверка по таймстемпу что свежее) и сервер начинает процессить таргеты.

по умолчанию сервер все данные тянет из сервисов, которые хранят всё нужное в памяти и 
иногда отправляют апдейты в бд.

получается сорс оф труз один - сервисы с данными. заполняется он только на инит сервера.

т.к. это будет браузерная игра (возможно позже будет версия на электроне, что тоже самое, 
но обернутое) клиент будет написан на реакте или next.js. карта будет на MapLibre.


================================================

Генерация карты. Главная задача получить список всех тайлов интересующей зоны с вписанными в каждую зону
количества и типа интересующих объектов: зданий, водоёмов, лесов, крупных дорог, etc. Важна возможность
итерационных подгрузок новых данных в существующие тайлы карты. На запуск сервера будет выгружаться
интересующая сервер часть карты и на базе данных в тайлах и конфига влияния разного типа объектов
на каждый тайл будет считаться эффекты, которые они оказывают на таргет в тайле. 

Процесс генерации:

1. Разбиение всей будущей карты на большие куски. Например США на тайлы по 1000х1000км.
2. Сохранение всех этих зон с нулевыми бафами в БД.
3. Загрузка отдельного куска osm.pbf в тайл процессор. 
4. Выгрузка из него всех интересующих объектов и построение спатиал индекса.
5. Определение четырех крайних точек этих объектов с запасом и выгрузка всех существующих уже созданных
  тайлов из этого диапазона из БД.
6. >> Посчитать количество объектов на тайле (+добавить уже бывшие тут) и принять решение разделять этот
  тайл на 4 или нет. Решение принимается на основе количества и веса в баллах каждого типа объектов.
  Количество объектов считается не прямо нахождением, а с учетом его зоны влияния. Одно здание может
  посчитаться в несколько тайлов. Все заафекченные тайлы (грязные) должны пересчитаться на потенциальное 
  дробление. Новые объекты не размазывются при дальнейшем дроблении на 4, а аплаят свой финальный вес 
  после последнего дробления для большей точности. Если было дробление то с каждым /4 количество 
  объектов каждого типа делятся на 4 между новыми тайлами.
7. После новых объектов на существующие тайлы все заафекченные тайлы записыватся в БД.

Повторять пункты 3 - 7 при накатывании новых данных на существующие тайлы. В пункте 3 можно
предварительно фильтровать объекты нужных типов (через osmfilter/osmium tags-filter) 
до этапа построения spatial-индекса, чтобы сократить издержки.